{
    "version": "1.131.0",
    "results": [
        {
            "check_id": "tmp.semgrep-rules.java.lang.security.audit.formatted-sql-string",
            "path": "src/main/java/eu/righettod/Vulns.java",
            "start": {
                "line": 15,
                "col": 13,
                "offset": 489
            },
            "end": {
                "line": 15,
                "col": 36,
                "offset": 512
            },
            "extra": {
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.java.lang.security.audit.formatted-sql-string",
            "path": "src/main/java/eu/righettod/Vulns.java",
            "start": {
                "line": 25,
                "col": 13,
                "offset": 959
            },
            "end": {
                "line": 25,
                "col": 37,
                "offset": 983
            },
            "extra": {
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.java.lang.security.audit.formatted-sql-string",
            "path": "src/main/java/eu/righettod/Vulns.java",
            "start": {
                "line": 35,
                "col": 17,
                "offset": 1387
            },
            "end": {
                "line": 35,
                "col": 41,
                "offset": 1411
            },
            "extra": {
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        }
    ],
    "errors": [],
    "paths": {
        "scanned": [
            ".gitignore",
            ".idea/.gitignore",
            ".idea/encodings.xml",
            ".idea/misc.xml",
            ".idea/vcs.xml",
            "pom.xml",
            "src/main/java/eu/righettod/Vulns.java"
        ]
    },
    "time": {
        "rules": [],
        "rules_parse_time": 0.16138195991516113,
        "profiling_times": {
            "config_time": 4.378233909606934,
            "core_time": 0.436309814453125,
            "ignores_time": 0.00024366378784179688,
            "total_time": 4.815016269683838
        },
        "parsing_time": {
            "total_time": 0.008337974548339844,
            "per_file_time": {
                "mean": 0.008337974548339844,
                "std_dev": 0.0
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_files": []
        },
        "scanning_time": {
            "total_time": 0.037542104721069336,
            "per_file_time": {
                "mean": 0.004692763090133668,
                "std_dev": 0.0001281972785767138
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_files": []
        },
        "matching_time": {
            "total_time": 0.015457391738891602,
            "per_file_and_rule_time": {
                "mean": 0.0010304927825927734,
                "std_dev": 8.191919444774007e-07
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_rules_on_files": []
        },
        "tainting_time": {
            "total_time": 0.0029883384704589844,
            "per_def_and_rule_time": {
                "mean": 8.538109915597099e-05,
                "std_dev": 5.216169001312443e-09
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_rules_on_defs": []
        },
        "targets": [],
        "total_bytes": 0,
        "max_memory_bytes": 160643008
    },
    "engine_requested": "OSS",
    "skipped_rules": []
}