{
    "version": "1.132.1",
    "results": [
        {
            "check_id": "tmp.semgrep-rules.java.lang.security.audit.formatted-sql-string",
            "path": "src/main/java/eu/righettod/Vulns.java",
            "start": {
                "line": 15,
                "col": 13,
                "offset": 489
            },
            "end": {
                "line": 15,
                "col": 36,
                "offset": 512
            },
            "extra": {
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            },
            "hints_for_analysis": {
                "details_as_object": {
                    "trace": [
                        "Entry Point: The input parameter 'name' is passed to the function 'realOne00'.",
                        "Data Flow: The 'name' parameter is used in a formatted string to construct an SQL query.",
                        "Vulnerability Check: The constructed SQL query uses String.format, which does not sanitize the input. This allows for SQL injection if 'name' contains malicious SQL code.",
                        "Sanitization/Validation: There is no sanitization or validation applied to the 'name' parameter before it is used in the SQL query.",
                        "Payload Formulation: A payload that could exploit this vulnerability would be something like ' OR '1'='1'. This payload would alter the SQL query to always return true, potentially exposing all user data."
                    ],
                    "present": "yes",
                    "exploit": "' OR '1'='1'",
                    "reasoning_for_decision": "The input parameter 'name' is not sanitized before being used in a formatted string for an SQL query. This allows for SQL injection through the use of a malicious payload that alters the intended SQL command."
                },
                "vuln_is_false_positive": false
            }
        },
        {
            "check_id": "tmp.semgrep-rules.java.lang.security.audit.formatted-sql-string",
            "path": "src/main/java/eu/righettod/Vulns.java",
            "start": {
                "line": 25,
                "col": 13,
                "offset": 961
            },
            "end": {
                "line": 25,
                "col": 36,
                "offset": 984
            },
            "extra": {
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            },
            "hints_for_analysis": {
                "details_as_text": "{ \"trace\": [ { \"step\": \"Identify Entry Points\", \"description\": \"The input parameter `name` is passed to the function `fakeOne00`. This parameter can be influenced by an upstream component.\" }, { \"step\": \"Trace Data Flow\", \"description\": \"The `name` parameter flows through several transformations: `replaceAll(\"'\", \"\")`, `replaceAll(\"-\", \"\")`, `replaceAll(\"\\\\\", \" \")`, and `trim()`. The transformed data is then used in the SQL query string.\" }, { \"step\": \"Check for Sanitization/Validation\", \"description\": \"The input undergoes multiple replacements to remove potentially harmful characters (`'`, `-`, `\\`). These transformations are designed to neutralize special elements that could modify the intended SQL command.\" }, { \"step\": \"Evaluate Effectiveness\", \"description\": \"The replacements ensure that any single quotes, hyphens, backslashes, or leading/trailing spaces in the input are removed. This makes it impossible for the payload to be interpreted as SQL syntax.\" }, { \"step\": \"Formulate Payload\", \"description\": \"Since the transformations neutralize all potential SQL injection vectors, no payload can exploit this vulnerability.\" }, { \"step\": \"Confirm Execution\", \"description\": \"Given that the input is sanitized and transformed, the `String.format` call will not produce a vulnerable SQL query. The payload does not reach the vulnerable line.\" } ], \"present\": \"no\", \"exploit\": \"\", \"reasoning_for_decision\": \"The transformations neutralize all potential SQL injection vectors, making it impossible for the payload to exploit this vulnerability.\"}",
                "vuln_is_false_positive": true
            }
        },
        {
            "check_id": "tmp.semgrep-rules.java.lang.security.audit.formatted-sql-string",
            "path": "src/main/java/eu/righettod/Vulns.java",
            "start": {
                "line": 35,
                "col": 17,
                "offset": 1389
            },
            "end": {
                "line": 35,
                "col": 40,
                "offset": 1412
            },
            "extra": {
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            },
            "hints_for_analysis": {
                "details_as_object": {
                    "trace": [
                        "Entry Point: The function `fakeOne01` is called with an input parameter `name`. This parameter can be influenced by an upstream component.",
                        "Data Flow: The input `name` is passed to the regular expression `Pattern.matches(\"^[a-z]+$\", name)`, which checks if `name` consists only of lowercase letters. If it does, the code proceeds to construct an SQL query using `String.format(\"SELECT * FROM USERS WHERE LOGIN='%s'\", name);`.",
                        "Sanitization/Validation: The regular expression `Pattern.matches(\"^[a-z]+$\", name)` ensures that `name` contains only lowercase letters. This prevents any characters that could modify the intended SQL command, such as single quotes or semicolons.",
                        "Effectiveness of Controls: Since the input is sanitized by the regex to contain only lowercase letters, it cannot be used to inject malicious SQL code. The payload ' OR '1'='1' -- would not pass this regex check and thus would be rejected before reaching the vulnerable line."
                    ],
                    "present": "no",
                    "exploit": "",
                    "reasoning_for_decision": "The regular expression `Pattern.matches(\"^[a-z]+$\", name)` effectively sanitizes the input, preventing any characters that could modify the SQL command. Therefore, the vulnerability is not present."
                },
                "vuln_is_false_positive": true
            }
        }
    ],
    "errors": [],
    "paths": {
        "scanned": [
            ".gitignore",
            ".idea/.gitignore",
            ".idea/encodings.xml",
            ".idea/misc.xml",
            ".idea/vcs.xml",
            "pom.xml",
            "src/main/java/eu/righettod/Vulns.java"
        ]
    },
    "time": {
        "rules": [],
        "rules_parse_time": 0.18055009841918945,
        "profiling_times": {
            "config_time": 4.632512807846069,
            "core_time": 0.47984838485717773,
            "ignores_time": 0.0002205371856689453,
            "total_time": 5.112895488739014
        },
        "parsing_time": {
            "total_time": 0.008379936218261719,
            "per_file_time": {
                "mean": 0.008379936218261719,
                "std_dev": 0.0
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_files": []
        },
        "scanning_time": {
            "total_time": 0.03684282302856445,
            "per_file_time": {
                "mean": 0.004605352878570557,
                "std_dev": 0.00012000598914241323
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_files": []
        },
        "matching_time": {
            "total_time": 0.012993812561035156,
            "per_file_and_rule_time": {
                "mean": 0.0008662541707356772,
                "std_dev": 6.940427409871417e-07
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_rules_on_files": []
        },
        "tainting_time": {
            "total_time": 0.0029997825622558594,
            "per_def_and_rule_time": {
                "mean": 8.570807320731026e-05,
                "std_dev": 6.54678768448636e-09
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_rules_on_defs": []
        },
        "fixpoint_timeouts": [],
        "targets": [],
        "total_bytes": 0,
        "max_memory_bytes": 163421120
    },
    "engine_requested": "OSS",
    "skipped_rules": []
}