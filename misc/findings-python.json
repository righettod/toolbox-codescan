{
    "version": "1.132.1",
    "results": [
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.injection.raw-html-format",
            "path": "vulns00.py",
            "start": {
                "line": 11,
                "col": 15,
                "offset": 203
            },
            "end": {
                "line": 11,
                "col": 61,
                "offset": 249
            },
            "extra": {
                "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
                "metadata": {
                    "cwe": [
                        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                    ],
                    "owasp": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "references": [
                        "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.correctness.flask-duplicate-handler-name",
            "path": "vulns00.py",
            "start": {
                "line": 15,
                "col": 1,
                "offset": 271
            },
            "end": {
                "line": 50,
                "col": 19,
                "offset": 1442
            },
            "extra": {
                "message": "Looks like `realOne01` is a flask function handler that registered to two different routes. This will cause a runtime error",
                "metadata": {
                    "category": "correctness",
                    "technology": [
                        "flask"
                    ]
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.injection.raw-html-format",
            "path": "vulns00.py",
            "start": {
                "line": 20,
                "col": 15,
                "offset": 497
            },
            "end": {
                "line": 20,
                "col": 61,
                "offset": 543
            },
            "extra": {
                "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
                "metadata": {
                    "cwe": [
                        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                    ],
                    "owasp": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "references": [
                        "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.injection.raw-html-format",
            "path": "vulns00.py",
            "start": {
                "line": 29,
                "col": 15,
                "offset": 765
            },
            "end": {
                "line": 29,
                "col": 61,
                "offset": 811
            },
            "extra": {
                "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
                "metadata": {
                    "cwe": [
                        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                    ],
                    "owasp": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "references": [
                        "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.injection.raw-html-format",
            "path": "vulns00.py",
            "start": {
                "line": 38,
                "col": 19,
                "offset": 1039
            },
            "end": {
                "line": 38,
                "col": 65,
                "offset": 1085
            },
            "extra": {
                "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
                "metadata": {
                    "cwe": [
                        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                    ],
                    "owasp": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "references": [
                        "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.injection.raw-html-format",
            "path": "vulns00.py",
            "start": {
                "line": 49,
                "col": 15,
                "offset": 1377
            },
            "end": {
                "line": 49,
                "col": 61,
                "offset": 1423
            },
            "extra": {
                "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
                "metadata": {
                    "cwe": [
                        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                    ],
                    "owasp": [
                        "A07:2017 - Cross-Site Scripting (XSS)",
                        "A03:2021 - Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "references": [
                        "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.audit.avoid_app_run_with_bad_host",
            "path": "vulns00.py",
            "start": {
                "line": 54,
                "col": 5,
                "offset": 1476
            },
            "end": {
                "line": 54,
                "col": 51,
                "offset": 1522
            },
            "extra": {
                "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
                "metadata": {
                    "cwe": [
                        "CWE-668: Exposure of Resource to Wrong Sphere"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "HIGH"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "tmp.semgrep-rules.python.flask.security.audit.debug-enabled",
            "path": "vulns00.py",
            "start": {
                "line": 54,
                "col": 5,
                "offset": 1476
            },
            "end": {
                "line": 54,
                "col": 51,
                "offset": 1522
            },
            "extra": {
                "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
                "metadata": {
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "owasp": "A06:2017 - Security Misconfiguration",
                    "references": [
                        "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
                    ],
                    "category": "security",
                    "technology": [
                        "flask"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "HIGH"
                },
                "severity": "WARNING",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        }
    ],
    "errors": [],
    "paths": {
        "scanned": [
            "vulns00.py"
        ]
    },
    "time": {
        "rules": [],
        "rules_parse_time": 0.2672121524810791,
        "profiling_times": {
            "config_time": 11.677054166793823,
            "core_time": 0.716865062713623,
            "ignores_time": 0.0005156993865966797,
            "total_time": 12.394768714904785
        },
        "parsing_time": {
            "total_time": 0.008471012115478516,
            "per_file_time": {
                "mean": 0.008471012115478516,
                "std_dev": 0.0
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_files": []
        },
        "scanning_time": {
            "total_time": 0.04906606674194336,
            "per_file_time": {
                "mean": 0.02453303337097168,
                "std_dev": 0.0005642015781290866
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_files": []
        },
        "matching_time": {
            "total_time": 0.012368440628051758,
            "per_file_and_rule_time": {
                "mean": 0.00030921101570129393,
                "std_dev": 3.513810508692928e-07
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_rules_on_files": []
        },
        "tainting_time": {
            "total_time": 0.0040416717529296875,
            "per_def_and_rule_time": {
                "mean": 8.420149485270183e-05,
                "std_dev": 1.2495494022207118e-09
            },
            "very_slow_stats": {
                "time_ratio": 0.0,
                "count_ratio": 0.0
            },
            "very_slow_rules_on_defs": []
        },
        "fixpoint_timeouts": [],
        "targets": [],
        "total_bytes": 0,
        "max_memory_bytes": 319382400
    },
    "engine_requested": "OSS",
    "skipped_rules": []
}